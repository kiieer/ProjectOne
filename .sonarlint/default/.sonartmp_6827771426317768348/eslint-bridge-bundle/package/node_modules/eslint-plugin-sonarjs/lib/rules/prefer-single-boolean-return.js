"use strict";
const nodes_1 = require("../utils/nodes");
const docs_url_1 = require("../utils/docs-url");
const rule = {
    meta: {
        messages: {
            replaceIfThenElseByReturn: 'Replace this if-then-else flow by a single return statement.',
        },
        schema: [],
        type: 'suggestion',
        docs: {
            description: 'Return of boolean expressions should not be wrapped into an "if-then-else" statement',
            recommended: 'error',
            url: (0, docs_url_1.default)(__filename),
        },
    },
    create(context) {
        return {
            IfStatement(node) {
                if (
                // ignore `else if`
                !(0, nodes_1.isIfStatement)(node.parent) &&
                    returnsBoolean(node.consequent) &&
                    alternateReturnsBoolean(node)) {
                    context.report({
                        messageId: 'replaceIfThenElseByReturn',
                        node,
                    });
                }
            },
        };
        function alternateReturnsBoolean(node) {
            if (node.alternate) {
                return returnsBoolean(node.alternate);
            }
            const { parent } = node;
            if ((parent === null || parent === void 0 ? void 0 : parent.type) === 'BlockStatement') {
                const ifStmtIndex = parent.body.findIndex(stmt => stmt === node);
                return isSimpleReturnBooleanLiteral(parent.body[ifStmtIndex + 1]);
            }
            return false;
        }
        function returnsBoolean(statement) {
            return (statement !== undefined &&
                (isBlockReturningBooleanLiteral(statement) || isSimpleReturnBooleanLiteral(statement)));
        }
        function isBlockReturningBooleanLiteral(statement) {
            return ((0, nodes_1.isBlockStatement)(statement) &&
                statement.body.length === 1 &&
                isSimpleReturnBooleanLiteral(statement.body[0]));
        }
        function isSimpleReturnBooleanLiteral(statement) {
            // `statement.argument` can be `null`, replace it with `undefined` in this case
            return (0, nodes_1.isReturnStatement)(statement) && (0, nodes_1.isBooleanLiteral)(statement.argument || undefined);
        }
    },
};
module.exports = rule;
//# sourceMappingURL=prefer-single-boolean-return.js.map